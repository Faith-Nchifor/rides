import Head from 'next/head'
//import Image from 'next/image'
//import P from 'next/se'
import { useState } from 'react';
import styles from '../styles/Home.module.css'
import { Col, Container, Nav, Row,Image,Dropdown, DropdownButton, Navbar, NavDropdown } from 'react-bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css'


function getOnlyUniqueValues(value, index, self) {
  return self.indexOf(value) === index;
}
function compare( a, b ) {
  if ( a.distance < b.distance ){
    return -1;
  }
  if ( a.distance > b.distance ){
    return 1;
  }
  return 0;
}



//var unique = a.filter(onlyUnique);
export default function Home({data,user}) {
  console.log(user);
  const today = Date.now();
  
  const [rides,setRides]=useState(data)
 
  
  let cities=rides.map(ride=>{
    return ride.city
  })
  cities=cities.filter(getOnlyUniqueValues)

  let states= rides.map(ride=>{
    return ride.state
  })
  states=states.filter(getOnlyUniqueValues)
  for (let i=0;i<rides.length;i++){
    let ride=rides[i];
    let distances=ride.station_path.map(path=>{
      return ride.destination_station_code-path;
    })
    let distance=Math.min(...distances)
    ride.distance=distance
  }
   let allRides=rides.sort( compare );
  //console.log(rides);
  let incomingRides=allRides.filter(ride=>{ 
   
    let rideDate=new Date(ride.date).getTime();
    return rideDate>today;
  })
  let pastRides=allRides.filter(ride=>{
    let rideDate=new Date(ride.date).getTime();
    return rideDate<today;
  })
  const [rides2Display,setRides2Display]=useState(allRides)
  const filterState=(e)=>{
    console.log(e.target.value);
    let filteredResult =allRides.filter(ride=>{
      return ride.state===e.target.value
    })
    setRides2Display(filteredResult)
  }
  const filterCity=(e)=>{
    console.log(e.target.value);
    let filteredResult= allRides.filter(ride=>{
      return ride.city===e.target.value
    })
    setRides2Display(filteredResult)
  }
  const filterByUpcommingR=()=>{
  setRides2Display(incomingRides)
  }
  const filterByPastR=()=>{
    setRides2Display(pastRides)
    }
    const filterByNearestR=()=>{
      setRides2Display(allRides)
      }
  //console.log(incomingRides);

  //console.log(pastRides.length);
  return (
    <div >
      <Head>
        <title>Ride Discovery</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar bg="light" expand="lg">
  <Container>
    <Navbar.Brand href="/">Edvora</Navbar.Brand>
    <Navbar.Toggle aria-controls="basic-navbar-nav" />
    <Navbar.Collapse id="basic-navbar-nav">
      
      <Nav  className="justify-content-end mx-auto">
      <Nav.Item className='mt-2 me-2'>{user.name}</Nav.Item>
      <img src={user.url} alt='img'  className={styles.profileImg}/>
      </Nav>
    </Navbar.Collapse>
  </Container>
</Navbar>
        <Container fluid color='secondary'>
          <Nav variant="tabs" defaultActiveKey="/home">
            <Nav.Item>
              <Nav.Link onClick={filterByNearestR}>Nearest Rides</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="link-1" onClick={filterByUpcommingR}>Upcoming Rides ({incomingRides.length})</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="link-2" onClick={filterByPastR}>
                Past Rides ({pastRides.length})
              </Nav.Link>
            </Nav.Item>
             
             
            
          </Nav>
          <div className='mx-2'>
         <label> Filter By City: </label>
          <select onChange={filterCity}>
      
      {cities.map((city,id)=>{
          return <option key={id}>{city}</option>
                      })}
      </select>
      </div>
      <div className='mx-2'>
    <label>Filter By State  </label>
      <select onChange={filterState}>

{states.map((state,id)=>{
     return <option key={id}>{state}</option>
                })}

</select>

          </div>
          <div>
            {rides2Display.map((ride,index)=>{
              return(
                <Row key={index} className='my-2'>
                  <Col xs={12} md={3} className='mx-auto mb-2'>
                    <Image className='img' src={ride.map_url} alt=''/>
                  </Col>
                  <Col xs={12} md={5} className='mx-auto mb-2'>
                    <p>Ride Id:{ride.id}</p>
                    <p>Origin Station:{ride.origin_station_code}</p>
                    <p>Station Path:{ride.station_path}</p>
                    <p>Date:{ride.date}</p>
                    <p>Distance:{ride.distance}</p>
                    </Col>
                    <Col xs={4} md={2}>
                      <p>{ride.city}</p>
                    </Col>
                    <Col xs={4} md={2}>
                      <p>{ride.state}</p>
                    </Col>
                </Row>
              )
            })}
          </div>
        </Container>
      
    

      <footer >
       <p className='text-center'>&copy; 2020</p>
      </footer>
    </div>
  )
}

export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const response1 = await fetch('https://assessment.api.vweb.app/rides')
  const data = await response1.json();
  const response2 = await fetch('https://assessment.api.vweb.app/user')
  const user= await response2.json();
  //console.log(rides);
  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      data,
      user
    },
  }
}
